/***************************
*Author - Ham2018
*Date - 28 June 2024
*Program - Bucket and Counting sort algorithms with simple user menu
*****************************/

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

void counting_sort(vector<int>& arr) {
    if (arr.empty()) {
        return;
    }

    // Find the max and min elements
    int max_element = *std::max_element(arr.begin(), arr.end());
    int min_element = *std::min_element(arr.begin(), arr.end());

    vector<int> count(max_element - min_element + 1, 0);

    // Store count
    for (int num : arr) {
        count[num - min_element]++;
    }

    for (int i = 1; i < count.size(); i++) {
        count[i] += count[i - 1];
    }

    // Output array to store sorted elements
    vector<int> output(arr.size());

    // Build the output array using the count array
    for (int i = arr.size() - 1; i >= 0; i--) {
        output[count[arr[i] - min_element] - 1] = arr[i];
        count[arr[i] - min_element]--;
    }

    // Copy sorted elements back into original array
    for (int i = 0; i < arr.size(); i++) {
        arr[i] = output[i];
    }
}

// Bucket Sort 
void bucket_sort(vector<int>& arr) {
    int n = arr.size();
    if (n <= 0) {
        return;
    }

    // Find the minimum and maximum elements
    int min_element = *std::min_element(arr.begin(), arr.end());
    int max_element = *std::max_element(arr.begin(), arr.end());

    // Calculate the number of buckets
    int num_buckets = max_element - min_element + 1;
    vector<vector<int>> buckets(num_buckets);

    // Put array elements into different buckets
    for (int i = 0; i < n; i++) {
        int bucket_index = (arr[i] - min_element) / num_buckets;
        buckets[bucket_index].push_back(arr[i]);
    }

    // Sort individual buckets
    for (int i = 0; i < num_buckets; i++) {
        sort(buckets[i].begin(), buckets[i].end());
    }

    // all buckets into arr[]
    int index = 0;
    for (int i = 0; i < num_buckets; i++) {
        for (size_t j = 0; j < buckets[i].size(); j++) {
            arr[index++] = buckets[i][j];
        }
    }
}

void print_array(const vector<int>& arr) {
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
}

int main() {
    int choice;
    cout << "Select sorting algorithm:" << endl;
    cout << "1. Counting Sort" << endl;
    cout << "2. Bucket Sort" << endl;
    cout << "Choice: ";
    cin >> choice;

    if (choice == 1) {
        int n;
        cout << "Enter the number of elements: ";
        cin >> n;
        vector<int> arr(n);
        cout << "Enter the elements: ";
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }

        counting_sort(arr);

        cout << "Sorted array: ";
        print_array(arr);
    }
    else if (choice == 2) {
        int n;
        cout << "Enter the number of elements: ";
        cin >> n;
        vector<int> arr(n);
        cout << "Enter the elements: ";
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }

        bucket_sort(arr);

        cout << "Sorted array: ";
        print_array(arr);
    }
    else {
        cout << "Invalid choice!" << endl;
    }

    return 0;
}
