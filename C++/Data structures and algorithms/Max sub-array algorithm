/********************
* Author- Ham 2018
* Date - 2 June 2024
* Program - Max sub array algorithm that prompts users for both size of and elements of a 1 dimensional array
********************/

#include<iostream>
#include<vector>
#include<algorithm>
#include<climits>

using namespace std;

int max_crossing_sum(vector<int>& arr, int left, int mid, int right) {
    int sum = 0;
    int l_sum = INT_MIN;

    // Include elements to the left of mid
    for (int i = mid; i >= left; i--) {
        sum += arr[i];
        if (sum > l_sum)
            l_sum = sum;
    }

    // Include elements to the right of mid
    sum = 0;
    int r_sum = INT_MIN;
    for (int i = mid + 1; i <= right; i++) {
        sum += arr[i];
        if (sum > r_sum)
            r_sum = sum;
    }

    // Return sum of elements on left and right of mid
    return l_sum + r_sum;
}

// Function to find the maximum subarray sum using divide and conquer
int max_sub_array_sum(vector<int>& arr, int left, int right) {
    if (left == right)
        return arr[left];

    // Find the mid point
    int mid = (left + right) / 2;

    return max({ max_sub_array_sum(arr, left, mid),
                max_sub_array_sum(arr, mid + 1, right),
                max_crossing_sum(arr, left, mid, right) });
}

int main() {
        int n;
        cout << "Enter the number of elements in the array: ";
        cin >> n;

        vector<int> arr(n);
        cout << "Enter the elements of the array: ";
        for (int i = 0; i < n; ++i) {
            cin >> arr[i];
        }

        int max_sum = max_sub_array_sum(arr, 0, n - 1);
        cout << "Maximum subarray sum is " << max_sum << endl;

        return 0;
    }
