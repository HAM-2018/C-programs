/*********************************
* Author - Haden Smith
* Date - 25 AUG 2024
* Program - Binary Search Tree/ Red-Black Tree. Menu with various operations for the tree and a toggle to switch between BST, and RBT.
*********************************/

#include <iostream>

using namespace std;

enum Color { RED, BLACK };
enum Mode { BST_MODE, RBT_MODE };  // Modes BST and RBT

class TreeNode {
public:
    int key;
    TreeNode* left;
    TreeNode* right;
    TreeNode* parent;
    Color color; 

    TreeNode(int key) : key(key), left(nullptr), right(nullptr), parent(nullptr), color(RED) {}
};

class Tree {
public:
    TreeNode* root;
    Mode mode;  // BST or RBT mode

    Tree() : root(nullptr), mode(BST_MODE) {}


    void toggle() {   // Toggle between the two modes
        if (mode == BST_MODE) {
            mode = RBT_MODE;
            cout << "Red-Black Tree.\n";
        }
        else {
            mode = BST_MODE;
            cout << "Binary Search Tree.\n";
        }
    }

    void insert(int key) {
        if (mode == BST_MODE) {
            bst_insert(key);
        }
        else {
            rbt_insert(key);
        }
    }

    void delete_key(int key) {
        if (mode == BST_MODE) {
            bst_delete(key);
        }
        else {
            rbt_delete(key);
        }
    }

    TreeNode* search(int key) {
        return search(root, key);
    }

    TreeNode* minimum(TreeNode* node) {
        while (node->left != nullptr)
            node = node->left;
        return node;
    }

    TreeNode* maximum(TreeNode* node) {
        while (node->right != nullptr)
            node = node->right;
        return node;
    }

    TreeNode* successor(TreeNode* node) {
        if (node->right != nullptr)
            return minimum(node->right);
        TreeNode* parent = node->parent;
        while (parent != nullptr && node == parent->right) {
            node = parent;
            parent = parent->parent;
        }
        return parent;
    }

    TreeNode* predecessor(TreeNode* node) {
        if (node->left != nullptr)
            return maximum(node->left);
        TreeNode* parent = node->parent;
        while (parent != nullptr && node == parent->left) {
            node = parent;
            parent = parent->parent;
        }
        return parent;
    }

    void in_order_traversal(TreeNode* node) {
        if (node != nullptr) {
            in_order_traversal(node->left);
            cout << node->key << " ";
            in_order_traversal(node->right);
        }
    }

    void view_current_keys() {
        if (root != nullptr) {
            cout << "Current keys in the Tree: ";
            in_order_traversal(root);
            cout << endl;
        }
        else {
            cout << "The Tree is empty." << endl;
      }
    }

private:
    TreeNode* search(TreeNode* node, int key) {
        if (node == nullptr || node->key == key)
            return node;
        if (key < node->key)
            return search(node->left, key);
        else
            return search(node->right, key);
    }

 
    void bst_insert(int key) {  // BST Search
        TreeNode* node = new TreeNode(key);
        TreeNode* parent = nullptr;
        TreeNode* current = root;

        while (current != nullptr) {
            parent = current;
            if (node->key < current->key)
                current = current->left;
            else
                current = current->right;
        }

        node->parent = parent;

        if (parent == nullptr)
            root = node;
        else if (node->key < parent->key)
            parent->left = node;
        else
            parent->right = node;
    }
    void bst_delete(int key) {
        TreeNode* node = search(key);
        if (node != nullptr)
            bst_delete_node(node);
    }
    void bst_delete_node(TreeNode* node) {
        if (node->left == nullptr)
            transplant(node, node->right);
        else if (node->right == nullptr)
            transplant(node, node->left);
        else {
            TreeNode* successor = minimum(node->right);
            if (successor->parent != node) {
                transplant(successor, successor->right);
                successor->right = node->right;
                successor->right->parent = successor;
            }
            transplant(node, successor);
            successor->left = node->left;
            successor->left->parent = successor;
        }
        delete node;
    }

    void rbt_insert(int key) {
        TreeNode* node = new TreeNode(key);
        TreeNode* parent = nullptr;
        TreeNode* current = root;

        while (current != nullptr) {
            parent = current;
            if (node->key < current->key)
                current = current->left;
            else
                current = current->right;
        }

        node->parent = parent;

        if (parent == nullptr)
            root = node;
        else if (node->key < parent->key)
            parent->left = node;
        else
            parent->right = node;

        fix_insert(node);
    }

    void fix_insert(TreeNode* node) {
        while (node != root && node->parent->color == RED) {
            if (node->parent == node->parent->parent->left) {
                TreeNode* uncle = node->parent->parent->right;
                if (uncle != nullptr && uncle->color == RED) {
                    node->parent->color = BLACK;
                    uncle->color = BLACK;
                    node->parent->parent->color = RED;
                    node = node->parent->parent;
                }
                else {
                    if (node == node->parent->right) {
                        node = node->parent;
                        left_rotate(node);
                    }
                    node->parent->color = BLACK;
                    node->parent->parent->color = RED;
                    right_rotate(node->parent->parent);
               }
            }
            else {
                TreeNode* uncle = node->parent->parent->left;
                if (uncle != nullptr && uncle->color == RED) {
                    node->parent->color = BLACK;
                    uncle->color = BLACK;
                    node->parent->parent->color = RED;
                    node = node->parent->parent;
                }
                else {
                    if (node == node->parent->left) {
                        node = node->parent;
                        right_rotate(node);
                    }
                    node->parent->color = BLACK;
                    node->parent->parent->color = RED;
                    left_rotate(node->parent->parent);
               }
          }
        }
        root->color = BLACK;
    }

    void rbt_delete(int key) {
        TreeNode* node = search(key);
        if (node != nullptr)
            delete_node(node);
    }

    void delete_node(TreeNode* node) {
        TreeNode* y = node;
        TreeNode* x;
        Color yOriginalColor = y->color;

        if (node->left == nullptr) {
            x = node->right;
            transplant(node, node->right);
        }
        else if (node->right == nullptr) {
            x = node->left;
            transplant(node, node->left);
        }
        else {
            y = minimum(node->right);
            yOriginalColor = y->color;
            x = y->right;
            if (y->parent == node) {
                if (x != nullptr)
                    x->parent = y;
           }
            else {
                transplant(y, y->right);
                y->right = node->right;
                y->right->parent = y;
            }
            transplant(node, y);
            y->left = node->left;
            y->left->parent = y;
            y->color = node->color;
        }

        delete node;

        if (yOriginalColor == BLACK)
            fix_delete(x);
    }

    void fix_delete(TreeNode* x) {
        while (x != root && (x == nullptr || x->color == BLACK)) {
            if (x == x->parent->left) {
                TreeNode* w = x->parent->right;
                if (w->color == RED) {
                    w->color = BLACK;
                    x->parent->color = RED;
                    left_rotate(x->parent);
                    w = x->parent->right;
                }
                if ((w->left == nullptr || w->left->color == BLACK) &&
                    (w->right == nullptr || w->right->color == BLACK)) {
                    w->color = RED;
                    x = x->parent;
                }
                else {
                    if (w->right == nullptr || w->right->color == BLACK) {
                        if (w->left != nullptr)
                            w->left->color = BLACK;
                        w->color = RED;
                        right_rotate(w);
                        w = x->parent->right;
                    }
                    w->color = x->parent->color;
                    x->parent->color = BLACK;
                    if (w->right != nullptr)
                        w->right->color = BLACK;
                    left_rotate(x->parent);
                    x = root;
               }
            }
            else {
                TreeNode* w = x->parent->left;
                if (w->color == RED) {
                    w->color = BLACK;
                    x->parent->color = RED;
                    right_rotate(x->parent);
                    w = x->parent->left;
                }
                if ((w->right == nullptr || w->right->color == BLACK) &&
                    (w->left == nullptr || w->left->color == BLACK)) {
                    w->color = RED;
                    x = x->parent;
                }
                else {
                    if (w->left == nullptr || w->left->color == BLACK) {
                        if (w->right != nullptr)
                            w->right->color = BLACK;
                        w->color = RED;
                        left_rotate(w);
                        w = x->parent->left;
                    }
                    w->color = x->parent->color;
                    x->parent->color = BLACK;
                    if (w->left != nullptr)
                        w->left->color = BLACK;
                    right_rotate(x->parent);
                    x = root;
              }
          }
        }
        if (x != nullptr)
            x->color = BLACK;
    }

    void left_rotate(TreeNode* x) {
        TreeNode* y = x->right;
        x->right = y->left;
        if (y->left != nullptr)
            y->left->parent = x;
        y->parent = x->parent;
        if (x->parent == nullptr)
            root = y;
        else if (x == x->parent->left)
            x->parent->left = y;
        else
            x->parent->right = y;
        y->left = x;
        x->parent = y;
    }

    void right_rotate(TreeNode* x) {
        TreeNode* y = x->left;
        x->left = y->right;
        if (y->right != nullptr)
            y->right->parent = x;
        y->parent = x->parent;
        if (x->parent == nullptr)
            root = y;
        else if (x == x->parent->right)
            x->parent->right = y;
        else
            x->parent->left = y;
        y->right = x;
        x->parent = y;
    }

    void transplant(TreeNode* u, TreeNode* v) {
        if (u->parent == nullptr)
            root = v;
        else if (u == u->parent->left)
            u->parent->left = v;
        else
            u->parent->right = v;
        if (v != nullptr)
            v->parent = u->parent;
    }
};

void menu() {
    cout << "\nRed-Black Tree/Binary Search Tree:\n";
    cout << "1. Insert\n";
    cout << "2. Search\n";
    cout << "3. Delete\n";
    cout << "4. Find Minimum\n";
    cout << "5. Find Maximum\n";
    cout << "6. Find Successor\n";
    cout << "7. Find Predecessor\n";
    cout << "8. View Keys\n";
    cout << "9. Toggle: (BST/RBT)\n";
    cout << "10. Exit\n\n";
    cout << "Enter your choice: ";
}

int main() {
    Tree tree;
    int choice, key;

    while (true) {
        menu();
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter key to insert: ";
            cin >> key;
            tree.insert(key);
            cout << "Inserted " << key << " into the Tree.\n";
            break;
        case 2:
            cout << "Enter key to search: ";
            cin >> key;
            if (tree.search(key))
                cout << "Key " << key << " found in the Tree.\n";
            else
                cout << "Key " << key << " not in the Tree.\n";
            break;
        case 3:
            cout << "Enter key to delete: ";
            cin >> key;
            tree.delete_key(key);
            cout << "Deleted " << key << " from the Tree.\n";
            break;
        case 4:
            if (tree.root) {
                cout << "Minimum key in the Tree is " << tree.minimum(tree.root)->key << ".\n";
            }
            else {
                cout << "The Tree is empty.\n";
            }
            break;
        case 5:
            if (tree.root) {
                cout << "Maximum key in the Tree is " << tree.maximum(tree.root)->key << ".\n";
            }
            else {
                cout << "Tree is empty.\n";
            }
            break;
        case 6:
            cout << "Enter the key to find successor: ";
            cin >> key;
            if (tree.search(key)) {
                TreeNode* succ = tree.successor(tree.search(key));
                if (succ)
                    cout << "Successor of " << key << " is " << succ->key << ".\n";
                else
                    cout << "Successor of " << key << " does not exist.\n";
            }
            else {
                cout << "Key " << key << " not found in the Tree.\n";
            }
            break;
        case 7:
            cout << "Enter the key to find predecessor: ";
            cin >> key;
            if (tree.search(key)) {
                TreeNode* pred = tree.predecessor(tree.search(key));
                if (pred)
                    cout << "Predecessor of " << key << " is " << pred->key << ".\n";
                else
                    cout << "Predecessor of " << key << " does not exist.\n";
            }
            else {
                cout << "Key " << key << " not found in the Tree.\n";
            }
            break;
        case 8:
            tree.view_current_keys();
            break;
        case 9:
            tree.toggle();
            break;
        case 10:
            cout << "Exiting\n";
            return 0;
        default:
            cout << "Invalid choice. Try again.\n";
        }
   }
}
