/******************
* Author - Ham2018
* Date - 9 June 2024
* Program - Heapsort algorithm for either min or max priority queues
*******************/

#include <iostream>
#include <vector>
#include <algorithm>

class Heap {
public:
    Heap(bool min_heap = true) : is_min_heap(min_heap) {}

    void heapSort(std::vector<int>& arr);

private:
    bool is_min_heap;

    void buildHeap(std::vector<int>& arr);
    void heapify(std::vector<int>& arr, int n, int i);
};

void Heap::heapSort(std::vector<int>& arr) {
    int n = arr.size();

    // Build the heap
    buildHeap(arr);

    // Extract elements from the heap
    for (int i = n - 1; i >= 0; i--) {
        std::swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}

void Heap::buildHeap(std::vector<int>& arr) {
    int n = arr.size();

    // Build heap from bottom up
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }
}

void Heap::heapify(std::vector<int>& arr, int n, int i) {
    int target = i; // Initialize largest or smallest as root
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    // left child is larger or smaller than root
    if (left < n && (is_min_heap ? arr[left] < arr[target] : arr[left] > arr[target])) {
        target = left;
    }

    // right child is larger or smaller than root
    if (right < n && (is_min_heap ? arr[right] < arr[target] : arr[right] > arr[target])) {
        target = right;
    }

    // largest or smallest is not root
    if (target != i) {
        std::swap(arr[i], arr[target]);

        // Recursively heapify the sub-tree
        heapify(arr, n, target);
    }
}

int main() {
    std::vector<int> arr;
    int choice, n, element;

    std::cout << "Enter the number of elements: ";
    std::cin >> n;

    std::cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        std::cin >> element;
        arr.push_back(element);
    }

    std::cout << "Choose heap type:\n1. Min-Heap\n2. Max-Heap\nChoice: ";
    std::cin >> choice;

    bool isMinHeap = (choice == 1);

    Heap heap(isMinHeap);
    heap.heapSort(arr);

    std::cout << "Sorted array:\n";
    for (const int& val : arr) {
        std::cout << val << " ";
    }
    std::cout << std::endl;

    return 0;
}
