/****************************************
Author- Haden Smith
Date- 01 APR 2024
Program- Simple calculator handling basic addition, subtraction, division and multiplication. Read and write from a CSV file. Save and pop from stack.
Enter your name and then navigate the menu screen.
****************************************/
#include <iostream>
#include <string>
#include <fstream>
#include <sstream>
#include <vector>
#include <limits>
#include <stack>

using namespace std;


class hscalc {

public:
	template<typename T> std::stack<T> static myStack;

	struct result {
		double addition;
		double subtraction;
		double multiplication;
		double division;
	};

	result calc(double a, double b, const string& op) {
		result res;

		if (op == "+")res.addition = add(a, b);
		else if (op == "-")res.subtraction = sub(a, b);
		else if (op == "*")res.multiplication = mult(a, b);
		else if (op == "/")res.division = div(a, b);
		else cout << "Invalid Operator" << endl;
		return res;

	}

	class mpgcalc { // Class within hscalc to manage MPG calculations
	public:

		string car;
		string route;
		double miles;
		double gallons;
		double mpg;

		mpgcalc() : miles(0), gallons(0), mpg(0) {}

		mpgcalc(string& car, string& route, double miles, double gallons)
			: car(car), route(route), miles(miles), gallons(gallons) {
			calculatempg();
		}
		void calculatempg() {
			mpg = gallons != 0 ? miles / gallons : 0;
		}
		void save_mpg_file() {
			(gallons > 0); {
				ofstream mpg_file("mpg_results.txt", ios::app);
				mpg_file << "    Car: " << car << "    Route: " << route << "    Miles: " << miles << "    Gallons: " << gallons << "    MPG: " << mpg;
				mpg_file.close();

			}
		}
	};
	class spcalc { // Class within hscalc to managae simple pay 
	public:
		string employee;
		double wage;
		double hours;
		double pay;

		spcalc() : wage(0), hours(0), pay(0) {}

		spcalc(string& employee, double wage, double hours, double pay)
			: employee(employee), wage(wage), hours(hours), pay(pay) {
			calculate_sp();
		}

		void calculate_sp() {
			pay = hours != 0 ? wage * hours : 0;
		}
		void save_spc_file() {
			(hours > 0); {
				ofstream spc_file("spc_results.txt", ios::app);
				spc_file << " " << employee << ":     " << "hours:" << "" << hours << "     Wage:$" << " " << wage << "      Total pay:$" << " " << pay;
				spc_file.close();
			}
		}
	};

protected:

	double add(double a, double b) {
		return a + b;
	}
	double sub(double a, double b) {
		return a - b;
	}
	double mult(double a, double b) {
		return a * b;
	}
	double div(double a, double b) {
		return a / b;
	};
};


class hscalc2 : public hscalc {

public:

	result allinone(double a, double b) {// function that accepts two numbers and returns + - / *
		result res;
		res.addition = add(a, b);
		res.subtraction = sub(a, b);
		res.multiplication = mult(a, b);
		res.division = div(a, b);
		return res;
	};
};

class Tools : public hscalc {

public:

	static void read_mpg_file() {
		ifstream mpg_file("mpg_results.txt"); // Open for reading
		if (mpg_file.is_open()) {
			std::string line;
			cout << "MPG calculations:\n";
			while (getline(mpg_file, line)) { // Read each line from the file
				cout << line << endl;
			}
			mpg_file.close();
		}
		else {
			cout << "Unable to open MPG results file or file is empty.\n";
		}
	}
	static void read_spc_file() {
		ifstream spc_file("spc_results.txt"); // Open for reading
		if (spc_file.is_open()) {
			std::string line;
			cout << "Simple pay calculations:\n";
			while (getline(spc_file, line)) {
				cout << line << endl;
			}
			spc_file.close();
		}
		else {
			cout << "Unable to open Simple Pay results file or file is empty.\n";
		}
	}

	string cleanInput(const string& input) {
		string output;
		for (char ch : input) {
			if (ch != '"') { // Skip quotation marks
				output += ch;
			}
		}
		return output;
	}
	void save_output_file(double runningTotal) {
		static int setNumber = 1; // Static variable to keep track of the set number
		ofstream output_file("CSV_output.txt", ios::app); 
		output_file << "Set " << setNumber << " final total: " << runningTotal << endl;	// Write the set number and final total to the file

		output_file.close(); 
		setNumber++; // Increment the set number for the next call
	}
	static void read_result_file() {
		ifstream output_file("CSV_output.txt");
		if (output_file.is_open()) {
			string line;
			cout << "CSV data set results:\n";
			while (getline(output_file, line)) {
				cout << line << endl;
			}
			output_file.close();
		}
		else {
			cout << "Unable to open CSV result file or file is empty.\n";
		}
	}
	void read_data_from_file() {
		fstream fin;
		fin.open("MathInput.csv", ios::in);

		if (!fin.is_open()) {
			cerr << "Failed to open file." << endl;
			return;
		}

		double runningTotal = 0; // Initialize running total
		double elements = 0;
		string line, word;
		vector<string> row;

		while (getline(fin, line)) {
			if (line == " =") {
				double average = elements > 0 ? runningTotal / elements : 0; // Calculate average
				cout << "\n\nAverage: " << average << endl;
				cout << "Elements: " << elements << endl;
				cout << "Final total: " << runningTotal << endl;
				cout << "**************************************\n" << endl;
				save_output_file(runningTotal); // Save to result file
				runningTotal = 0;
				elements = 0;
				continue;
			}
			stringstream s(line);
			double num = 0;
			char operation = '\0';

			// Split the line by comma and try to convert the first part to double
			try {
				if (getline(s, word, ',')) {
					string cleanedWord = cleanInput(word); // Clean the input string
					num = stod(cleanedWord);
				}

				if (getline(s, word, ',')) {
					operation = word[0]; 
				}
			}
			catch (const std::invalid_argument& e) {
				cerr << "Invalid number: " << word << endl;
				continue; // Skip this line and continue with the next one
			}
			// Perform the operation
			switch (operation) {
			case '+':
				runningTotal += num;
				cout << "Add: " << num;
				break;
			case '-':
				runningTotal -= num;
				cout << "Subtract: " << num;
				break;
			case '*':
				runningTotal *= num;
				cout << "Multiply: " << num;
				break;
			case '/':
				runningTotal /= num;
				cout << "Divide: " << num;
				break;

			default:
				cerr << "Unsupported operation: " << operation << endl;
				continue; // For this example, we'll just skip to the next line
			}
			elements++;

			cout << "      Current total: " << runningTotal << endl; // print the running total after each line
		}
		if (elements > 0) {
			save_output_file(runningTotal);
		}
			fin.close(); // Close the file
	}

};
template<typename T>
class StackManager {
public:
	static std::stack<T> stack;

	static void save_to_stack(const T& value) {
		stack.push(value);
		std::cout << "Saved to stack: " << value << std::endl;
	}

	static T popFromStack() {
		if (stack.empty()) {
			throw std::runtime_error("Attempt to pop from an empty stack.");
		}
		T value = stack.top();
		stack.pop();
		return value;
	}
	static void print_stack() {
		std::stack<T> tempStack = stack;

		std::cout << "Current stack: ";
		while (!tempStack.empty()) {
			std::cout << tempStack.top() << ",";
			tempStack.pop();
		}
		std::cout << std::endl;
	}
};

template<typename T>
std::stack<T> StackManager<T>::stack;

int main() {
	Tools toolsinstance;
	hscalc::mpgcalc mpg;
	hscalc::spcalc spc;


	std::string name;
	int choice;
	double var1, var2, result;
	char op;

	fstream mpg_file;// Files for reading and writing MPG and simple pay
	fstream spc_file;


	cout << "What is your name? ";// Get users name and make string
	getline(std::cin, name);
	cout << "Welcome " << name << "!\n";

	do {
		cout << "\n\n1. hs_calc\n2. All in one\n3. Calc mpg\n4. Calc Simple Pay\n5. View MPG Calculations\n6. View Simple Pay calculations\n7. Save MPG to file\n8. Save Simple Pay Calc to file\n9. View MPG file\n10. View Simple Calc file\n11. Read data from file\n12. Reading result file\n13. Save to stack\n14. Pop from stack \n15. Exit\n";// Modified menu design
		cout << "Choice: ";
		cin >> choice;

		if (choice == 15) {
			std::cout << name << " Thank you for using my application\n\n";
			break;
		}
		if (choice == 1) {
			cout << "Enter two numbers and an operator (ex.. 20 * 20) : ";
			cin >> var1 >> op >> var2;
			string opStr(1, op); // Create a string from the char op
			hscalc calculator;
			hscalc::result calcResult = calculator.calc(var1, var2, opStr);
			switch (op) {
			case '+':
				cout << "Result: " << calcResult.addition << endl;
				break;
			case '-':
				cout << "Result: " << calcResult.subtraction << endl;
				break;
			case '*':
				cout << "Result: " << calcResult.multiplication << endl;
				break;
			case '/':
				if (var2 != 0)
					cout << "Result: " << calcResult.division << endl;
				else
					cout << "Cannot divide by zero." << endl;
				break;
			default:
				cout << "Invalid operator." << endl;
				break;
			}
		}
		else if (choice == 2) {
			cout << "Enter two numbers: ";
			cin >> var1 >> var2;
			hscalc2 all;
			hscalc2::result allinoneResult = all.allinone(var1, var2);
			cout << "Addition result: " << allinoneResult.addition << std::endl;
			cout << "Subtraction result: " << allinoneResult.subtraction << std::endl;
			cout << "Multiplication result: " << allinoneResult.multiplication << std::endl;
			cout << "Division result: " << allinoneResult.division << std::endl;
		}
		else if (choice == 3) {
			cout << "Enter car make: ";
			cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
			getline(cin, mpg.car);
			cout << "Enter your route: ";
			getline(cin, mpg.route);
			cout << "\nMiles traveled: ";
			cin >> mpg.miles;
			cout << "Gallons used: ";
			cin >> mpg.gallons;
			if (mpg.gallons == 0) {
				cout << "Can not divide by zero. \n";
			}
			else {
				mpg.calculatempg();
				cout << "    Car: " << mpg.car << "    Route: " << mpg.route << "    Miles: " << mpg.miles << "    Gallons: " << mpg.gallons << "    MPG: " << mpg.mpg;
			}
		}
		if (choice == 4) {
			cout << "Enter employee name: ";
			cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
			getline(cin, spc.employee);
			cout << "Enter employee's hourly wage: $";
			cin >> spc.wage;
			cout << "Enter hours worked for employee: ";
			cin >> spc.hours;
			if (spc.hours == 0)
				cout << "Can not divide by zero";
			else
				spc.pay = spc.wage * spc.hours;
			cout << " " << spc.employee << ":     " << "hours:" << "" << spc.hours << "     Wage:$" << " " << spc.wage << "      Total pay:$" << " " << spc.pay;
		}
		else if (choice == 5) {
			if (mpg.gallons > 0) {
				cout << "Last MPG calculation:\n\n";
				cout << "In your " << mpg.car << " from " << mpg.route << " your miles per gallon was " << mpg.mpg;
			}
			else {
				cout << "No MPG calculations to view.";
			}
		}
		else if (choice == 6) {
			if (spc.hours > 0) {
				cout << "Your last simple pay calculation: \n\n";
				cout << " " << spc.employee << ":     " << "hours:" << "" << spc.hours << "     Wage:$" << " " << spc.wage << "      Total pay:$" << " " << spc.pay;
			}
			else {
				cout << "No simple pay calculations to view.";
			}
		}
		if (choice == 7) {
			if (mpg.gallons > 0) {
				mpg.save_mpg_file();
				cout << "Data saved successfully.\n";
			}
			else {
				cout << "No valid MPG calculation to save.\n";
			}
		}
		else if (choice == 8) {
			if (spc.hours > 0) {
				spc.save_spc_file();
				cout << "Data saved successfully. \n";
			}
			else {
				cout << "No valid Simple Pay calculation to save. \n";
			}
		}
		if (choice == 9) {
			Tools::read_mpg_file();
		}

		if (choice == 10) {
			Tools::read_spc_file();
		}
		if (choice == 11) {
			toolsinstance.read_data_from_file();
		}
		if (choice == 12) {
			Tools::read_result_file();
		}
		if (choice == 13) {
			std::string input;
			double number;
			do {
				std::cout << "\nEnter a number to add it to a stack (type 'back' to return): ";
				std::getline(std::cin >> std::ws, input); // whitespace handling
				if (input == "back") {
					break;
				}

				std::stringstream ss(input);
				if (ss >> number) {
					StackManager<double>::save_to_stack(number); 
				}
				else {
					std::cout << "Invalid input. Please enter a valid number or 'back' to return.\n";
				}
				 StackManager<double>::print_stack();
			} while (true);
		}
		if (choice == 14) {
			int innerchoice;
			do {
				StackManager<double>::print_stack();
				cout << "\nPress '1' to pop the stack, press '2' to go back: ";
				cin >> innerchoice;
				if (innerchoice == 1) {
					StackManager<double>::popFromStack();
				} 
			} while (innerchoice != 2);
		
		}

	} while (choice != 15);
	return 0;

}
